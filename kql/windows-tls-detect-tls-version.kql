//KQL query to detect TLS versions used, cipher used and destination targets
//update the Cipher table here with Cipher Suite/Name mappings
let CipherLookupTable = datatable(CipherSuite: string, CipherName: string )
[
"0X0001", "RSA_WITH_NULL_MD5", 
"0X0002", "RSA_WITH_NULL_SHA",
"0X0004", "RSA_WITH_RC4_128_MD5",
"0X0005", "RSA_WITH_RC4_128_SHA",
"0X0009", "RSA_WITH_DES_CBC_SHA",
"0X000A", "RSA_WITH_3DES_EDE_CBC_SHA",
"0X0012", "DHE_DSS_WITH_DES_CBC_SHA",
"0X0013", "DHE_DSS_WITH_3DES_EDE_CBC_SHA",
"0X0015", "DHE_RSA_WITH_DES_CBC_SHA",
"0X0016", "DHE_RSA_WITH_3DES_EDE_CBC_SHA",
"0X002F", "RSA_WITH_AES_128_CBC_SHA",
"0X0032", "DHE_DSS_WITH_AES_128_CBC_SHA",
"0X0033", "DHE_RSA_WITH_AES_128_CBC_SHA",
"0X0035", "RSA_WITH_AES_256_CBC_SHA",
"0X0038", "DHE_DSS_WITH_AES_256_CBC_SHA",
"0X0039", "DHE_RSA_WITH_AES_256_CBC_SHA",
"0X003B", "RSA_WITH_NULL_SHA256",
"0X003C", "RSA_WITH_AES_128_CBC_SHA256",
"0X003D", "RSA_WITH_AES_256_CBC_SHA256",
"0X0040", "DHE_DSS_WITH_AES_128_CBC_SHA256",
"0X0067", "DHE_RSA_WITH_AES_128_CBC_SHA256",
"0X006A", "DHE_DSS_WITH_AES_256_CBC_SHA256",
"0X006B", "DHE_RSA_WITH_AES_256_CBC_SHA256",
"0X009C", "RSA_WITH_AES_128_GCM_SHA256",
"0X9C", "RSA_WITH_AES_128_GCM_SHA256",
"0X009D", "RSA_WITH_AES_256_GCM_SHA384",
"0X009E", "DHE_RSA_WITH_AES_128_GCM_SHA256",
"0X009F", "DHE_RSA_WITH_AES_256_GCM_SHA384",
"0X00A2", "DHE_DSS_WITH_AES_128_GCM_SHA256",
"0X00A3", "DHE_DSS_WITH_AES_256_GCM_SHA384",
"0XC010", "ECDHE_RSA_WITH_NULL_SHA",
"0XC011", "ECDHE_RSA_WITH_RC4_128_SHA",
"0XC012", "ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
"0XC013", "ECDHE_RSA_WITH_AES_128_CBC_SHA",
"0XC014", "ECDHE_RSA_WITH_AES_256_CBC_SHA",
"0XC027", "ECDHE_RSA_WITH_AES_128_CBC_SHA256",
"0XC028", "ECDHE_RSA_WITH_AES_256_CBC_SHA384",
"0XC02F", "ECDHE_RSA_WITH_AES_128_GCM_SHA256",
"0XC030", "ECDHE_RSA_WITH_AES_256_GCM_SHA384",
"0XC006", "ECDHE_ECDSA_WITH_NULL_SHA",
"0XC007", "ECDHE_ECDSA_WITH_RC4_128_SHA",
"0XC008", "ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
"0XC009", "ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
"0XC00A", "ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
"0XC023", "ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
"0XC024", "ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
"0XC02B", "ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
"0XC02C", "ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
"0X1301", "AES_128_GCM_SHA256",
"0X1302", "AES_256_GCM_SHA384",
"0X1303", "CHACHA20_POLY1305_SHA256",
"0X1304", "AES_128_CCM_SHA256",
"0X1305", "AES_128_CCM_8_SHA256"
];
Event
| where EventID == 36880
| extend Protocol = tostring(parse_xml(EventData).DataItem.UserData.EventXML.Protocol)
| extend Type = tostring(parse_xml(EventData).DataItem.UserData.EventXML.Type)
| extend TargetName = (parse_xml(EventData).DataItem.UserData.EventXML.TargetName)
| extend CipherSuite = tostring(toupper((parse_xml(EventData).DataItem.UserData.EventXML.CipherSuite)))
| join kind=inner CipherLookupTable on CipherSuite
| project TimeGenerated, Type, Computer, Protocol, TargetName, CipherSuite, CipherName